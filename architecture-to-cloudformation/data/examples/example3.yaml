AWSTemplateFormatVersion: '2010-09-09'
Description: >
  This CloudFormation stack sets up a serverless data processing pipeline 
  with FedRAMP compliance. It includes encryption, secure access, logging, and monitoring.
Resources:
  LoggingBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: "logging/"
      Encryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionMethod: AES256  # Enabling SSE-S3 for encryption at rest.

  LoggingBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:PutObject'
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:aws:s3:::${LoggingBucket}/*
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${LoggingBucket}/*
              - !Sub arn:aws:s3:::${LoggingBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'true'  # Enforcing secure transport (HTTPS).

  # EventBridge Rule Role
  EventBridgeRuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: StartExecutionPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'states:StartExecution'
                Resource:
                  - !GetAtt 
                    - DataProcessingStateMachine
                    - Arn

  # Origin Bucket
  OriginBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: origin-logs
      VersioningConfiguration:
        Status: Enabled
      NotificationConfiguration:
        EventBridgeConfiguration:
          EventBridgeEnabled: true
      Encryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionMethod: AES256  # Enabling SSE-S3 for encryption.

  OriginBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref OriginBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${OriginBucket}/*
              - !Sub arn:aws:s3:::${OriginBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'true'

  DeliveryBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: delivery-logs
      VersioningConfiguration:
        Status: Enabled
      Encryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionMethod: AES256  # Enabling SSE-S3 for encryption.

  DeliveryBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DeliveryBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: 
              - !Sub arn:aws:s3:::${DeliveryBucket}/*
              - !Sub arn:aws:s3:::${DeliveryBucket}
            Principal: "*"
            Condition:
              Bool:
                'aws:SecureTransport': 'true'

  # CloudWatch Logs Policy
  CloudWatchLogsPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: 'arn:aws:logs:*:*:*'

  # Lambda role policies - ensure no excessive permissions
  LambdaExecutionPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: "*"
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
            Resource:
              - !Sub arn:aws:s3:::${OriginBucket}/*
              - !Sub arn:aws:s3:::${DeliveryBucket}/*

  # Lambda functions - Ensure all Lambda functions follow least privilege
  CleanFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.lambda_handler
      Role: !GetAtt CleanFunctionRole.Arn
      Runtime: python3.12
      Timeout: 900
      Environment:
        Variables:
          LOG_LEVEL: "INFO"
      Code:
        ZipFile: |
          import boto3
          import os

          s3 = boto3.client('s3')

          def lambda_handler(event, context):
              s3_key = event["detail"]["object"]["key"]
              bucket_name = event["detail"]["bucket"]["name"]

              s3_response = s3.get_object(Bucket=bucket_name, Key=s3_key)
              data = s3_response['Body'].read().decode('utf-8')

              return {
                  "clean_data": data,
              }

  # Step Functions Role and Policies
  StateMachineRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: states.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "StateMachineInvokeLambdaPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: 
                  - !GetAtt CleanFunction.Arn
                  - !GetAtt SummarizeFunction.Arn
                  - !GetAtt ActionItemFunction.Arn

  DataProcessingStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      RoleArn: !GetAtt [StateMachineRole, Arn]
      DefinitionString: |
        {
          "StartAt": "CleanData",
          "States": {
            "CleanData": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "Payload.$": "$",
                "FunctionName": "${CleanFunctionARN}"
              },
              "Next": "Parallel"
            },
            "Parallel": {
              "Type": "Parallel",
              "Branches": [
                {
                  "StartAt": "SummarizeData",
                  "States": {
                    "SummarizeData": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${SummarizeFunctionARN}"
                      },
                      "End": true
                    }
                  }
                },
                {
                  "StartAt": "ActionItemData",
                  "States": {
                    "ActionItemData": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::lambda:invoke",
                      "Parameters": {
                        "Payload.$": "$",
                        "FunctionName": "${ActionItemFunctionARN}"
                      },
                      "End": true
                    }
                  }
                }
              ],
              "End": true
            }
          }
        }
